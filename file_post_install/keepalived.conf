! Keepalived configuration for PostgreSQL HA (High Availability) with failover

global_defs {
    router_id VOID_CLUSTER          # Unique cluster identifier
    script_user root                 # User that executes the scripts
    enable_script_security           # Enable script security
}

# Monitoring script for PostgreSQL
vrrp_script check_postgresql {
    script "/etc/keepalived/check_pgsql.sh"  # Path to check script
    interval 1       # Execute script every 1 second
    timeout 1        # Maximum response timeout
    fall 1           # Number of failures before marking as KO
    rise 1           # Number of successes before marking as OK
    weight -200      # Penalize node priority if PostgreSQL fails
}

# VRRP1 group configuration for subnet 10.133.133.0/24
vrrp_instance VRRP1 {
    state BACKUP                    # Initial node state (BACKUP)
    interface eth1                  # Monitored network interface
    virtual_router_id 1             # Unique VRRP ID
    priority 100                    # Default node priority
    advert_int 1                    # VRRP announcement frequency (1 second)
    
    track_interface {
        eth1                        # Monitor network interface state
    }
    
    virtual_ipaddress {
        10.133.133.254/24 dev eth1  # Virtual IP for this group, backend network
    }
    
    track_script {
        check_postgresql            # Monitor PostgreSQL check script
    }
    nopreempt                       # Prevent automatic failback after recovery
}

# Configuration of a second VRRP group for a different subnet
vrrp_instance VRRP2 {
    state BACKUP                    # Initial node state (BACKUP)
    interface eth1                  # Monitored network interface
    virtual_router_id 2             # Unique VRRP ID for the group
    priority 100                    # Default priority
    advert_int 1                    # VRRP announcement frequency

    virtual_ipaddress {
        172.16.1.4/24 dev eth2    # Virtual IP in frontend "services" subnet
    }

    track_script {
        check_postgresql            # Monitor PostgreSQL
    }

    nopreempt                       # Prevent automatic failback after recovery
}
